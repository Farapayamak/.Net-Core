//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScheduleWebService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScheduleWebService.ScheduleSoap")]
    public interface ScheduleSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddSchedule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> AddScheduleAsync(string username, string password, string to, string from, string text, bool isflash, System.DateTime scheduleDateTime, ScheduleWebService.PeriodType period);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddUsance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> AddUsanceAsync(string username, string password, string to, string from, string text, bool isflash, System.DateTime scheduleStartDateTime, int repeatAfterDays, System.DateTime scheduleEndDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddNewUsance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> AddNewUsanceAsync(string username, string password, string to, string from, string text, bool isflash, System.DateTime scheduleStartDateTime, int countrepeat, System.DateTime scheduleEndDateTime, ScheduleWebService.PeriodType periodType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveSchedule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> RemoveScheduleAsync(string username, string password, int scheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveScheduleList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> RemoveScheduleListAsync(string username, string password, int[] scheduleIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetScheduleStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> GetScheduleStatusAsync(string username, string password, int scheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetScheduleDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ScheduleWebService.ScheduleDetails> GetScheduleDetailsAsync(string username, string password, int scheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddMultipleSchedule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int[]> AddMultipleScheduleAsync(string username, string password, string[] to, string from, string[] text, bool isflash, System.DateTime[] scheduleDateTime, ScheduleWebService.PeriodType period);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddNewMultipleSchedule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int[]> AddNewMultipleScheduleAsync(string username, string password, string[] to, string from, string[] text, bool isflash, System.DateTime[] scheduleDateTime, ScheduleWebService.PeriodType period);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum PeriodType
    {
        
        /// <remarks/>
        Once,
        
        /// <remarks/>
        Daily,
        
        /// <remarks/>
        Weekly,
        
        /// <remarks/>
        Monthly,
        
        /// <remarks/>
        Yearly,
        
        /// <remarks/>
        Custom,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ScheduleDetails
    {
        
        private int scheduleIDField;
        
        private string senderField;
        
        private string titleField;
        
        private string bodyField;
        
        private int bodyPartsField;
        
        private int totalCountField;
        
        private int sentCountField;
        
        private int failedCountField;
        
        private string scheduleDateField;
        
        private string sendDateField;
        
        private byte sendStatusField;
        
        private byte scheduleStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int ScheduleID
        {
            get
            {
                return this.scheduleIDField;
            }
            set
            {
                this.scheduleIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Sender
        {
            get
            {
                return this.senderField;
            }
            set
            {
                this.senderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Body
        {
            get
            {
                return this.bodyField;
            }
            set
            {
                this.bodyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int BodyParts
        {
            get
            {
                return this.bodyPartsField;
            }
            set
            {
                this.bodyPartsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int TotalCount
        {
            get
            {
                return this.totalCountField;
            }
            set
            {
                this.totalCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int SentCount
        {
            get
            {
                return this.sentCountField;
            }
            set
            {
                this.sentCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public int FailedCount
        {
            get
            {
                return this.failedCountField;
            }
            set
            {
                this.failedCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string ScheduleDate
        {
            get
            {
                return this.scheduleDateField;
            }
            set
            {
                this.scheduleDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string SendDate
        {
            get
            {
                return this.sendDateField;
            }
            set
            {
                this.sendDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public byte SendStatus
        {
            get
            {
                return this.sendStatusField;
            }
            set
            {
                this.sendStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public byte ScheduleStatus
        {
            get
            {
                return this.scheduleStatusField;
            }
            set
            {
                this.scheduleStatusField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface ScheduleSoapChannel : ScheduleWebService.ScheduleSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class ScheduleSoapClient : System.ServiceModel.ClientBase<ScheduleWebService.ScheduleSoap>, ScheduleWebService.ScheduleSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ScheduleSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(ScheduleSoapClient.GetBindingForEndpoint(endpointConfiguration), ScheduleSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ScheduleSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ScheduleSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ScheduleSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ScheduleSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ScheduleSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<int> AddScheduleAsync(string username, string password, string to, string from, string text, bool isflash, System.DateTime scheduleDateTime, ScheduleWebService.PeriodType period)
        {
            return base.Channel.AddScheduleAsync(username, password, to, from, text, isflash, scheduleDateTime, period);
        }
        
        public System.Threading.Tasks.Task<int> AddUsanceAsync(string username, string password, string to, string from, string text, bool isflash, System.DateTime scheduleStartDateTime, int repeatAfterDays, System.DateTime scheduleEndDateTime)
        {
            return base.Channel.AddUsanceAsync(username, password, to, from, text, isflash, scheduleStartDateTime, repeatAfterDays, scheduleEndDateTime);
        }
        
        public System.Threading.Tasks.Task<int> AddNewUsanceAsync(string username, string password, string to, string from, string text, bool isflash, System.DateTime scheduleStartDateTime, int countrepeat, System.DateTime scheduleEndDateTime, ScheduleWebService.PeriodType periodType)
        {
            return base.Channel.AddNewUsanceAsync(username, password, to, from, text, isflash, scheduleStartDateTime, countrepeat, scheduleEndDateTime, periodType);
        }
        
        public System.Threading.Tasks.Task<int> RemoveScheduleAsync(string username, string password, int scheduleId)
        {
            return base.Channel.RemoveScheduleAsync(username, password, scheduleId);
        }
        
        public System.Threading.Tasks.Task<int> RemoveScheduleListAsync(string username, string password, int[] scheduleIdList)
        {
            return base.Channel.RemoveScheduleListAsync(username, password, scheduleIdList);
        }
        
        public System.Threading.Tasks.Task<int> GetScheduleStatusAsync(string username, string password, int scheduleId)
        {
            return base.Channel.GetScheduleStatusAsync(username, password, scheduleId);
        }
        
        public System.Threading.Tasks.Task<ScheduleWebService.ScheduleDetails> GetScheduleDetailsAsync(string username, string password, int scheduleId)
        {
            return base.Channel.GetScheduleDetailsAsync(username, password, scheduleId);
        }
        
        public System.Threading.Tasks.Task<int[]> AddMultipleScheduleAsync(string username, string password, string[] to, string from, string[] text, bool isflash, System.DateTime[] scheduleDateTime, ScheduleWebService.PeriodType period)
        {
            return base.Channel.AddMultipleScheduleAsync(username, password, to, from, text, isflash, scheduleDateTime, period);
        }
        
        public System.Threading.Tasks.Task<int[]> AddNewMultipleScheduleAsync(string username, string password, string[] to, string from, string[] text, bool isflash, System.DateTime[] scheduleDateTime, ScheduleWebService.PeriodType period)
        {
            return base.Channel.AddNewMultipleScheduleAsync(username, password, to, from, text, isflash, scheduleDateTime, period);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ScheduleSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.ScheduleSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ScheduleSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://api.payamak-panel.com/post/Schedule.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.ScheduleSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://api.payamak-panel.com/post/Schedule.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            ScheduleSoap,
            
            ScheduleSoap12,
        }
    }
}
